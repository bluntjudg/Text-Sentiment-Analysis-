# -*- coding: utf-8 -*-
"""Sentiment-API.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vqF-3F_K5BaZjsryd0M9Bnh8oF51843L
"""

# Load EDA Pkgs
import pandas as pd
import numpy as np

# Load Data Viz Pkgs
import seaborn as sns

# Load ML Pkgs
# Estimators
from sklearn.linear_model import LogisticRegression
from sklearn.naive_bayes import MultinomialNB

# Transformers
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score,classification_report,confusion_matrix

# Load Dataset
df = pd.read_csv("emotion_dataset_raw.csv")

df.head()

# Value Counts
df['Emotion'].value_counts()

# Plot
sns.countplot(x='Emotion',data=df)

|pip install neattext

"""NeatText Library - NeatText is a Python library that offers text preprocessing functions for cleaning and normalizing text data. It provides various text cleaning operations to remove noise, normalize text, and handle common text-related issues."""

import neattext.functions as nfx

"""This are the various types provided by neatext library to preprocess the data"""

# Data Cleaning
dir(nfx)

df['clean_text'] = df['Text'].apply(nfx.remove_userhandles)

"""This removes the usernames used in the text and cleans the text!"""

df['clean_text'] = df['Text'].apply(nfx.remove_stopwords)

df

# Features & Labels
Xfeatures = df['clean_text']
ylabels = df['Emotion']

#  Split Data
x_train,x_test,y_train,y_test = train_test_split(Xfeatures,ylabels,test_size=0.3,random_state=42)

# Build Pipeline
from sklearn.pipeline import Pipeline

# LogisticRegression Pipeline
pipe_lr = Pipeline(steps=[('cv',CountVectorizer()),('lr',LogisticRegression())])

# Train and Fit Data
pipe_lr.fit(x_train,y_train)

pipe_lr

# Check Accuracy
pipe_lr.score(x_test,y_test)

# Make A Prediction
ex1 = "This book was so interesting it made me happy"
pipe_lr.predict([ex1])

# Make A Prediction
ex1 = "feeling fail french #fuckfrench "
pipe_lr.predict([ex1])

# Prediction Prob
pipe_lr.predict_proba([ex1])

# To Know the classes
pipe_lr.classes_

"""Prediction and classification ends here

below are some EDA methods to understand the data efficiently.
"""

# Filter texts based on the 'joy' subset
joy_texts = df[df['Emotion'] == 'joy']['Text']
print(joy_texts.head(5))

# Filter texts based on the 'joy' subset
arr_texts = df[df['Emotion'] == 'disgust']['Text']
print(arr_texts.head(5))

# Define the text to find
text_to_find = "I have a feeling i will fail french #fuckfrench"

# Search for the text in the 'Text' column
found_text = df[df['Text'] == text_to_find]
print(found_text)

